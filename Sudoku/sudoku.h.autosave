#ifndef SUDOKU_H
#define SUDOKU_H

#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
#include <utility>
#include <tuple>
#include <stdio.h>
//#include <time.h>
#include <ctime>
#include <exception>

#define Size 9

static int contador = 0;
static bool solved = false;
static bool logicCut = true;
static std::vector <int> potatoSequence(Size); //123456789
static std::vector <int> goodSequence;
static std::vector < std::tuple<std::pair<int,int>, std::vector<int>> > position;
static std::vector<std::pair<int,int>> numberCount(Size);

static std::vector<std::vector<int>> Matrix;

size_t getBlockCase(std::vector<size_t> currentPosition);
bool validSolved();
bool validPosition(std::vector<size_t> currentPosition, int value);
std::vector<size_t> nextPosition();
void cut();
void setNumberCount ();
void configureAll();
std::vector <int> posibilities();
void solver();
void estruturaStatic(int M);
void geradorSudoku(int QtdNumeros);

//-------------------------------------------------------------------------------


void geradorSudoku(int QtdNumeros){
    std::srand(static_cast<unsigned>(std::time(nullptr)));
    int cont = 0;
    while (cont < 10) {
        size_t coluna = rand() % 9;
        size_t linha = rand() % 9;
        int random = rand() % 9 + 1;

        if(validPosition({linha, coluna}, random) && Matrix.at(linha).at(coluna) == 0){
            Matrix.at(linha).at(coluna) = random;
            cont++;
        }

    }

    configureAll();
    solver();

    cont = 0;
    while (cont < QtdNumeros) {
        size_t coluna = rand() % 9;
        size_t linha = rand() % 9;

        if(Matrix.at(linha).at(coluna) != 0){
            Matrix.at(linha).at(coluna) = 0;
            cont++;
        }
    }

}

void estruturaStatic(int M){
    switch (M) {
    case 0:
        Matrix = {{0,0,2,8,0,6,4,3,0},
                  {0,9,3,0,0,0,0,1,7},
                  {6,0,0,0,7,9,2,0,0},
                  {2,0,0,4,5,0,0,6,0},
                  {3,0,6,2,0,0,5,8,0},
                  {0,0,0,0,0,0,7,9,0},
                  {0,6,0,0,0,0,0,2,1},
                  {0,0,0,6,3,4,0,7,0},
                  {5,3,7,0,0,0,0,0,0}};
        break;
    case 1:
        Matrix = {{0,7,0,0,0,1,9,0,0},
                  {0,0,0,0,6,0,0,5,0},
                  {0,0,9,0,0,0,0,0,3},
                  {0,0,5,6,0,0,0,0,0},
                  {0,2,8,0,3,0,0,0,0},
                  {7,0,3,0,0,5,0,0,0},
                  {1,0,7,9,0,0,0,0,2},
                  {2,0,0,0,0,0,0,0,6},
                  {3,0,0,1,0,0,0,0,0}};
        break;
    default:
        Matrix = {{0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0},
                  {0,0,0,0,0,0,0,0,0}};
        break;
    }

}

size_t getBlockCase(std::vector<size_t> currentPosition){
    return (currentPosition[0]*size_t(3))+currentPosition[1];
}

bool validSolved(){
    for(size_t linha = 0; linha < Size; linha++){
        for(size_t coluna = 0; coluna < Size; coluna++){
            if(Matrix.at(linha).at(coluna) == 0)
                return false;
        }
    }
    return true;
}

bool validPosition(std::vector<size_t> currentPosition, int value){
    size_t blockPositionLinha = (currentPosition[0]/3)* 3 + 1;
    size_t blockPositionColuna = ((currentPosition[1]/3)* 3) + 1;

    for(size_t i =  blockPositionLinha - 1 ; i <= blockPositionLinha + 1 ; i++){
        for(size_t j = blockPositionColuna - 1 ; j <= blockPositionColuna + 1 ; j++){
            if(value == Matrix.at(i).at(j))
                return false;
        }
    }

    for(size_t i = 0 ; i < Size ; i++){
        if(value == Matrix.at(i).at(currentPosition[1]) || value == Matrix.at(currentPosition[0]).at(i))
            return false;
    }
    return true;
}

std::vector<size_t> nextPosition(){
    std::vector<size_t> nextPosition;
    for(size_t i = 0; i < Size; i++){
        for(size_t j = 0; j < Size; j++){
            if(Matrix.at(i).at(j) == 0){
                nextPosition = {i,j};
                return nextPosition;
            }
        }
    }
    return {size_t(-1),size_t(-1)};
}

void cut(){
    std::vector<int> vec;
    for(size_t i = 0; i < Size; i++){
        for(size_t j = 0; j < Size; j++){
            if(Matrix[i][j] == 0){
                for (auto p : potatoSequence) {
                    if (validPosition({i,j},p)) {
                        vec.push_back(p);
                    }
                }
                /*
                for(auto x : vec){
                    std::cout << x << " | ";
                }
                std::cout<<std::endl;
                */
                position.push_back(std::tuple<std::pair<int,int>,std::vector<int>>(std::make_pair(i,j), vec));
                vec.clear();
            }
        }
    }

    sort(position.begin(), position.end(),[](std::tuple<std::pair<int,int>, std::vector<int>> &a,std::tuple<std::pair<int,int>, std::vector<int>> &b)
    { return std::get<1>(a).size() < std::get<1>(b).size(); });


    /*for(auto i : position){
        std::cout << std::get<0>(i).first << " - " << std::get<0>(i).second << " = " << std::get<1>(i).size() << " | " << std::endl;
    }*/

}

void setNumberCount (){
    std::vector<std::pair<int,int>> numberCount;

    for (int var = 0; var < Size; var++) {
        numberCount.push_back(std::make_pair(var + 1,0));
    }

    for(size_t i = 0; i < Size; i++){
        for(size_t j = 0; j < Size; j++){
            if(Matrix.at(i).at(j) != 0){
                numberCount.at( size_t(Matrix.at(i).at(j) - 1)).second += 1;
            }
        }
    }

    sort(numberCount.begin(),numberCount.end(),[](std::pair<int,int> &a, std::pair<int,int> &b){return a.second > b.second; });

    for(auto i : numberCount)
        goodSequence.push_back(i.first);
}

void configureAll(){
    solved = false;
    potatoSequence.clear();
    iota(potatoSequence.begin(),potatoSequence.end(),1);
    goodSequence.clear();
    if(logicCut)
        setNumberCount();
}

std::vector <int> posibilities(){
    if(logicCut)
        return goodSequence;

    return potatoSequence;
}

void solver(){
    std::vector<size_t> currentPosition = nextPosition();

    if(currentPosition[0] == size_t(-1) && currentPosition[1] == size_t(-1)){
        solved = true;
        return;
    }
    for(int i: posibilities()){
        contador += 1;
        if(validPosition(currentPosition, i)){
            Matrix[currentPosition[0]][currentPosition[1]] = i;
            solver();
            if(solved)
                return;
        }
    }
    Matrix[currentPosition[0]][currentPosition[1]] = 0;
    return;
}


#endif // SUDOKU_H
